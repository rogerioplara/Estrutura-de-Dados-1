Vetores
    - arranjo
    - array
    - matrizes de uma �nica linha

Em C s�o declarados igual a uma vari�vel, por�m o tamanho � definido na inst�ncia��o;
Primeiro elemento na posi��o 0;
�ltimo elemento est� na posi��o N-1;

Sintaxe:
<tipo><nome>[<tamanho>];
int A[10];

Declara��o com lista de inicializa��o:
<tipo><nome>[<tamanho>]={<v1>,<v2>,...,<vN>};
int B[3]={15,66,42};

Para acessar os elementos:
<nome_do_vetor>[<�ndice>];

----------------------------------------------


Matrizes (bidimensional)
    - arranjo tabular de MxN valores, onde M � o n�mero de linhas e N � o n�mero de colunas;
    - os elementos s�o acess�veis tamb�m por �ndices:
        - i geralmente associado �s linhnas;
        - j geralmente associado �s colunas;
    - em uma matriz MxN:
        - �ndices variam de 0 a M-1 e de 0 a N-1;

Sintaxe:
<tipo><nome>[<dim1>][<dim2>]...[<dimN>];

Declara��o de Matriz bidimensional:
int A[3][3];

Para acessar os valores:
A[0][0];
A[2][2];
A[0][2];
A[1][0];

----------------------------------------------



Estrutura de dados Heterog�neas (struct em C)
    - tamb�m conhecidas como registros, tipos de dados compostos, Structs(C);
    - agrupam informa��es de tipos de dados diferentes;
    - trata um grupo de valores como sendo uma �nica vari�vel, com v�rios campos distintos;
    - cria-se um novo tipo de dados;

Sintaxe:
struct <nome_do_registro>{
    <tipo> <nome_do_campo1>;
    <tipo> <nome_do_campo2>;
    <tipo> <nome_do_campo3>;
    ...
    <tipo> <nome_do_campoN>;
};

Como utilizar:
    - apenas definir n�o basta;
    - � preciso criar uma vari�vel do novo tipo criado;

Sintaxe de inst�ncia��o da vari�vel struct:
    struct <nome_do_registro> <nome_da_variavel>;
    struct produto p1;

Acesso � struct:
    - utiliza-se o nome da vari�vel est�tica seguida de um ponto (.);
    <nome_da_vari�vel>.<campo>;
    p1.preco;

Registros podem ser combinados com vetores:
    i. declara-se um novo registro;
    ii. cria-se um vetor de registros (assim como se cria uma vari�vel do tipo registro);

Exemplo: criar uma lista de produtos:
    - vetor de registros do tipo "produto";

----------------------------------------------



# Ponteiros

## Vari�vel -> Endere�o de mem�ria;
    - conte�do armazenado, fisicamente, em uma posi��o de mem�ria;

## Cada tipo primitivo possui um tamanho e uma estrutura pr�prios, em mem�ria:
    - Char: 1 byte;
    - Int: 4 btyes;
    - Float: 4 bytes;
    - Double: 8 bytes;

# Aloca��o Din�mica de Mem�ria;

    Aloca��o est�tica:
        - Reserva espa�o de mem�ria em tempo de compila��o;
        - Pode ser mais r�pida durante a execu��o;
        - Pode desperdi�ar mem�ria;

    Aloca��o Din�mica:
        - Reserva espa�os de mem�ria em tempo de execu��o;
        - Pode ser mais lenta durante a execu��o;
        - Otimiza o uso da mem�ria;

        Uso de mem�ria alocada dinamicamente:
            - tentativa de aproveitar toda a ram dispon�vel;
            - cada m�quina disponibiliza um espa�o total de ram de tamanho pr�prio;
            - solu��o: alocar mem�ria, dinamicamente, conforme a necessidade;

        Aplica��es (exemplos):
            - processadores de texto (word);
            - bancos de dados;

PARA UTILIZAR A ALOCA��O DIN�MICA

Biblioteca stdlib.h

malloc();
    - aloca um bloco de bytes em mem�ria;
    - caso malloc() n�o consiga alocar um bloco:
        - Retorna NULL
        - caso contr�rio: retorna um ponteiro do tipo VOID contendo o endere�o inicial do bloco;
    - manipula-se o conte�do da vari�vel din�mica com o operador asterisco(*);

    sintaxe:
    *<vari�vel_ponteiro = <valor>;

    sintaxe:
    <ponteiro> = (<cast>*) malloc(<tam. em bytes>);

    cast: define o tipo do ponteiro -> int, float, struct, char...

    malloc retorna um endere�o do tipo VOID (n�o process�vel. por isso � necess�rio fazer o cast);

free();
    - libera o espa�o de mem�ria alocado a um ponteiro;

    sintaxe:
    free(<ponteiro>);

----------------------------------------------



Listas, filas e pilhas

    Listas (computa��o)
    - Arranjo no qual a ordem dos elementos da lista coincide com sua posi��o f�sica (em mem�ria);
        - elementos adjacentes na lista ocupam posi��os cont�guas em mem�ria;
        - dois tipos espec�ficos: pilhas e filas;

    ## Pilhas (stack) LIFO - last in first out

    - Lista linear em que todos os acesso se d�o em uma �nica extremidade - o TOPO;
        ex: pilha de livros, pilha de pratos;
    - Os elementos s� podem ser inseridos no topo e s� podem ser retirados pelo topo;
    -> Novo elemento: Push
    -> Retirar elemento: Pop;

    Fun��es:
        Push(elemento); -> recebe como par�metro o elemento;
        Pop(); -> retorna o elemento que est� retirando;

    Aplica��es:
        - avan�ar e voltar em navegadores;
        - desfazer e refazer em editores;
        - recursividade;
        - chamada e execu��o de fun��es;

    Opera��es sobre pilhas
        - empilhar (push);
        - desempilhar (pop);

    ## Filas (queue) FIFO - first in first out

    - a inser��o de elementos � feita apenas ao FIM da fila;
    - a remo��o de elementod s� pode ser feita pela frente;

    FIFO
        Os dados s�o processados segundo a ordem de chegada;

    Opera��es com filas:
        Enfileirar(push_back);
        Desenfileirar(pop);

----------------------------------------------



Listas Din�micas
    � muito mais simples interpretar listas, pilhas e filas quando implementadas em um vetor est�tico.
    - Vantagens da implementa��o est�tica:
        acesso direto a elementos;
        lista ordenada: busca bin�ria;

    - Desvantagens:
        nem sempre se sabe o �ndice do dado para acessar diretamente (necessita de busca);
        inser��o/remo��o ruins: "Arrastar os dados";
        O tamanho do vetor fica "engessado"

    Solu��o: permitir que os dados ocupem qualquer posi��o em mem�ria (posi��es n�o cont�guas);
    Gerencia-se a ordem dos elemntos atrav�s de refer�ncias que eles fazem entre si;

Inten��o: Evitar a defini��o de um n�mero m�ximo de elementos estaticamente
    - deixar que o n�mero m�ximo de elementos evolua dinamicamente em tempo de execu��o;

    A orde (l�gica) dos elementos da lista (n�s) n�o, necessariamente, deve coincidir com sua posi��o em mem�ria.

    LISTA LIGADA OU LISTA ENCADEADA
        - Utiliza a estrutura n� (regustro-struct)

        exemplo:
        struct NO{
            int dado;
            struct NO* prox;
        };

    Para desenvolver listas din�micas em linguagem C:
        - Fun��es de aloca��o de mem�ria;
        - malloc(), sizeof() e free();

    Estrutura n� (registro - struct)
        Dados: definidos pela aplica��o (chaves/valor);
        Refer�ncia para o pr�ximo elemento da lista;
            Ponteiro do tipo N�;

    O come�o da lista � demarcado por um ponteiro (sentinela) chamado 'inicio';

    Ponteiros que armazenam o valor "NULL"
        - tem o significado de "n�o apontar para elemento algum";

    Outros tipos:
        Lista duplamente encadeada;
        Lista circular;

INSER��O DE DADOS (lista):
    N�o h� regras: pode-se inserir em qualquer posi��o;

    CUIDADO: dependendo da posi��o da inser��o, podem haver casos espec�ficos:
        lista vazia; inicio da lista; meio da lista; fim da lista;

    Primeiro passo: alocar um novo n� (malloc);
    Segundo passo: percorer a lista (ponteiro);
    Terceiro passo: atualizar os ponteiros;

REMO��O DE DADOS (lista):
    A exclus�o de elementos de uma lista encadeada � semelhante a inser��o;
    O algoritmo deve prever alguns casos espec�ficos:
        - remo��o do primeiro elemento;
        - exclus�o de um elemento qualquer;

    Primeiro passo: percorrer a lista;
    Segundo passo: encontrar a posi��o de remo��o;
    Terceiro passo: atualizar os ponteiros;
    Quarto passo: liberar mem�ria;

IMPRESS�O DE DADOS (lista);

    para struct ponteiro utilizar o operador ->

    void imprimir(struct NO* ptr){
        system("cls");
        while(ptr! = NULL){
            printf("%d", ptr->dado);
            ptr = ptr->prox;
        }
    }

----------------------------------------------



Pilhas din�micas

    Estrutura N�
        typedef struct NO{
            int dado;
            struct NO* prox;
        }NO;

    Estrutura Pilhas
        typedef struct PILHA{
            NO* topo;
        }PILHA;

    Vari�vel do tipo PILHA
        PILHA *p;

    Fun��o Empilha() ou Push()

    void empilha(){
        NO* ptr = (NO *) malloc(sizeof(NO));
        ptr->dado = rand()%100;
        ptr->prox = p->topo;
        p->topo = ptr;
    }

    Fun��o Desempilha() ou Pop()

    int desempilha(){
        NO* ptr = p->;
        int dado;
        if(ptr != NULL){
            p->topo = ptr->prox;
            ptr->prox = NULL;
            dado = ptr->dado;
            free(ptr);
            return dado;
        }
    }

----------------------------------------------



Fila Dinâmica

    - implementação dinâmica:
        estrutura nó:
            dado;
            próximo elemento;
        ponteiros:
            referência para o início da fila;
            referência para o fim da fila;
            pode-se utilizar ambos os ponteiros ou apenas um:
                - depende da sua implementação;
        
    Estrutura nó:
        dado
        próximo nó

    typedef struct NO{
        int dado;
        struct NO* prox;
    }NO;

    typedef struct FILA{
        NO* inicio;
        NO* fim;
    }FILA;

    FILA *p;


----------------------------------------------

TEORIA DOS GRAFOS: modelar elementos e suas relações

    Sete pontes de Konigsberg
        surgimento da teoria dos grafos;
        - Euler (1736) teoria dos grafos;
    Problema: passar por todas as pontes sem repetir alguma delas;
        - Euler: provou que não há solução;
        - Modelagem do problema em forma de grafo;
            cada porção de terra: vértice;
            cada ponte: aresta;
    Prova de Euler:
        Só é possível se houver zero ou dois vértices com número ímpar de arestas;
    - Nenhum vértice com número ímpar de arestas:
        Vértices de grau par (grau 2): é possível chegar ao vértice por uma das arestas e sair pela aresta restante;
    - Dois vértices com número ímpar de arestas:
        Vértices de grau impar (grau 3): é possível chegar ao vértice por uma das arestas, sair por outra e ainda restará uma aresta;
        Nesse caso, um dos vértices de grau ímpar deve ser o vértice inicial e o outro deve ser o vértice final;

    Teoria dos grafos
        Grafos: estrutura abstrata que representa um conjunto de elementos chamados vértices, e sua relações de interdependência chamadas arestas;
    
    Elementos de um grafo:
        Nós ou vértices;
            - ponderados (pesos) ou não;
        Arestas;
            - orientadas ou não orientadas;
            - ponderadas (pesos) ou não;

        Utilidade:
            estudar a relação entre objetos de um determinado conjunto;
            problemas modelados sob grafos;
            muitos algoritmos prontos;

        Notação formal: um grafo pode ser definido como uma tupla G = (V,E);
            V é o conjunto de vértices Vi, senque que V != vazio;
            O conjunto E possui as arestas cujos elementos são pares ordenados de vértices (Vi, Vj);
    
        Vértices adjacentes:
            vértices a e b para os quais existe uma aresta interconectando-os;
        Aresta Incidente:
            aresta que se conecta a um vértice;
        Grau de vértice (não orientadas):
            número de arestas incidentes;
        Grau de saída (orientadas):
            número de arestas que partem de um vértice;
        Grau de entrada (orientadas):
            número de arestas que chegam a um vértice;

    Exemplo 1: pontes de Konigsberg:
        G1 = (V1,E1)
        V1 = {a, b, c, d}
        E1 = {(a,b); (a,b); (a,d); (b,c); (b,c); (b,d); (c,d)}

    Exemplo 2: árvore:
        G2 = (V2,E2)
        V2 = {1, 2, 3, 4, 5, 6, 7}
        E2 = {(1,2); (1,3); (1,4); (2,5); (4,6); (4,7)}

    Grafo conexo: todos os vértices devem ser 'atingíveis';
    
    Grafo orientad (dígrafo): o par ordenado de vértices (aresta) tem orientação;
        G3 = (V3,E3)
        V3 = {a, b, c, d}
        E3 = {<a,b>; <a,d>; <c,b>; <d,a>}
    
    Grafo cíclico: é possível sair de um vértice V, caminhar pelo grafo e retornar a V sem repetir arestas;

    Grafo ponderado: o par ordenado de vértices possui pesos associados a ele;

    G4 = (V4,E4)
    V4 = {a, b,, c, d}
    E4 = {(a,b,5); (a,d,10); (b,c,25); (b,d,0); (c,d,7)}

    O problema das pontes foi o promeiro a ser modelado, matematicamente, por um grafo:
        - desde então diversos algoritmos foram criados para solucionar problemas recorrentes.
    Sua utilização é muito comum quando:
        - existem diversos elementos (vértices) e relações entre pares de elementos (arestas);
        - quando necessário extrair algum "custo" do relacionamento entre elementos;
        - quando é necessário extrair novos relacionamentos a partir dos existentes;

    Exemplo 1: desenvolviemtno de um website:
        - vértices: páginas;
        - arestas: links entre páginas;
        - problemas:
            verificar se todas as páginas estão ligadas;
            se o usuário tem a possibilidade de acessar todo o conteúdo;
            se a estrutura tem boa navegabilidade;

    Exemplo 2: empresa de logística:
        - vértices: localização dos clientes;
        - arestas: distância entre os clientes;
        - problemas: traçar as possíveis rotas de entrega;
        - soluções:
            busca em largura (BFS);
            algoritmo de Djikstra;
                bfs guloso;
                menor custo possível;

    Exemplo 3: empresa de transporte aéreo:
        - vértices: aeroportos;
        - arestas: voos;
        - problemas:
            encontrar voos diretos;
            encontrar possibilidades de conexões;
            encontrar oções relacionados a:
                custo de passagem;
                tempo de espera no aeroporto;
                tempo total da viagem;
                modelo das aeronaves;

REPRESENTAÇÃO COMPUTACIONAL

    Tipos de representação:
        Vantagens x Desvantagens
        - aspectos:
            tempo (complexidade) de implementação;
            uso de memória;
            custo computacional;
        - estrutura de dados:
            vetores;
            matrizes;
            alocação dinâmica;

    3 formas:
        1 - Vetor de arestas;
        2 - Matriz de adjacências;
        3 - Listas de adjacência;

    Estrutura em matriz, linhas e colunas representam os vértices;
        considere dois vértices Vi e VJ;
        ADJ é a matriz de adjacência;
        ADJ[Vi][Vj] = 1 existe a aresta;
        ADJ[Vi][Vj] = 0 não existe aresta;
    
    Vetor de arcos (arestas):
        estrutura mais simples;
        menos eficiente;
        define-se estrutura chamada "arco";
            arco = par de vértices (vi,vj);
        cria-se o vetor "grafo" que armazena arcos;

    #define TAM 25

    typedef struct arc{
        int vi;
        int vj;
        int peso;
    }arc;

    arc grafo[TAM];

    Lista de adjacências
        para cada vértice, uma lista de seus adjacentes;

        Define-se uma estrutura chamada Nó:
        nó = vértice VJ e ponteiro para nó

        cria-se um vetor de nós;

        Para cada posição Vi no vetor, se Vj é adjacente adicione-o na lista;

        #define N 5
        typedef struct str_no{
            int v;
            str_no *proximo;
        }str_no;

        str_no grafo[n];

        Vi
        0->V1->V3
        1->V0
        2->V4->V1
        3
        4->V1->V2->V3

        grafo (não orientado):
        Vi
        0->2
        1->2->3
        2->0->1->4
        3->1
        4->2

    Implementação simples utilizando estruturas estáticas:
        - Matriz de adjacências - grafo não orientad.
        - Operacoes:
            1 - inicializar o grafo (escolher o tamanho - numero de vértices);
            2 - inserir aresta;
            3 - remover aresta;
            4 - exibir matriz de adjacências;

----------------------------------------------

Busca em Grafos

    Algoritmos prontos para utilização

    Busca em profundidade - Depth-first searc (DFS)
        explora o grafo investigando o novo vértice adjacente, em seguida, o adjacente do adjacente, etc.
    - Todo um segmento do grafo é visitado até o final, antes de um novo caminho ser investigado;
    - A partir do nó inicial, empilham-se os nós adjacentes e marca o nó corrente como visitado. Em seguida, pega-se o nó do topo da pilha e repete-se o processo. Não havendo mais adjacentes, desempilha-se e repete o processo, até que a pilha esteja vazia; 

    Pseudocódigo - algoritmo

    DFS(Grafo G, Vértice inicio):
        Marque início como visitado e empilhe-o
        Se corrente tem vértico V adjacente não visitado    
            Marque v como visitado, empilhe v
        Senão
            Desempilhe
        Se pilha não vazia
            Volte ao passo 3
        Se não
            Encerre o algoritmo

    Busca em Largura - Breadth-first search (BFS)
        Explora o gráfico investigando todos os vértices adjacentos por primeiro, de uma vez, antes que um novo caminho seja investigado.
    - A partir do nó inicial, para cada nó adjacente, enfilera-o e marca visitado. Quando não houver mais adjacentes, desenfilera-se um vértice, usa-se o nó da frente como vértice corrente e repete o processo até que a lista se esvazie;

1   BFS(Grafo G, Vértice inicio):
2       Marque início como visitado e enfilere-o
3       Para cada vertice v adjacente ao corrente
4           Marque v como visitado, enfilere V
5       Desenfilere
6       Se a fila não está vazia
7           volte ao passo 3
8       Se não
9           Encerre o algoritmo
    
Algoritmo de Djikstra
    Como encontrar o caminho de menor custo em um grafo conexo onde as arestas tem peso não negativo;

Baseado no algoritmo busca em largura (BFS)
    Algoritmo guloso - tenta todas as possibilidades;
        - encontra o ótimo global a partir de ótimos locais;
    
    Aplicações:
        Roteamento de pacotes;
        Trafego urbano e aéreo, GPS, Ferrovias;
        Automação industrial;

Princípios para funcionamento:
    - Matriz de custos: pesos associados a cada par de vértices (arestas);
    - Ao visitar um vértice, adiciona-se na fila apenas os nós cujo acesso é o de menor custo acumulado;
    - Sempre encontra o caminho ótimo entre dois nós quaisquer de um grafo;

1   Djikstra(Grafo G, Vértice inicia, Vértice final):
2       corrente <- início
3       Para cada vértice v adjacente a corrente
4           calcule o custo de inicio até V
5           O custo é o menor até o momento?
6               corrent <- V
7       Corrente <- vertice com menor custo desde o inicio
8       Se corrente = final
9           encerre o algoritmo
10       Se não
11          volte ao passo 3

Exercícios:

1. Qual é a principal diferença entre a Busca em Largura e a Busca em Profundidade?
    A busca em profundidade utiliza o empilhamento dos elementos e faz a busca de um primeiro caminho até o fim, depois vai desempilhando e fazendo os caminhas a partir dos elementos já visitados. A busca em largura enfileira os nós visitados, garantindo que todos os nós adjacentes ao nó atual sejam percidos para então visitar os mais distantes;

2. Em que caso a Busca em Largura é mais eficiente que a Busca em Profundidade? 
    A busca em largura (BFS) é geralmente mais eficiente em casos que a solução mais próxima da raiz é desejada. Quando o grafo possui ramificação elevada.

3. O que diferencia o algoritmo de Dijkstra e a busca em largura?
    O algoritmo de Dijkstra tem como objetivo buscar o caminho mais "barato" em um grafo onde os vértices tenham um "custo". Apesar da semelhança com o meio de percorrer o grafo, o algoritmo de Dijkstra possui uma finalidade específica para esse tipo de busca. 

